In TestNG you can parameterize your tests means you can run single test with different sets of input data.

For Example, Lets create YahooRegistrationTest which register users with multiple sets of data.

We are taking 2 dimensional array to hold the values in particular cells.

	 		Columns	

				0		1		2		3
	 		 ---------------------------------
Rows	0	|	usr	|	pwd	 |	email |	 city |	
	 		 ---------------------------------
		1	|		|		 |		  |	 	  |
	 		 ---------------------------------
		2	|		|		 |		  |	 	  |
	 		 ---------------------------------
		3	|		|		 |		  |	 	  |
	 		 ---------------------------------
	 
In the first row, we'll keep the first row of data for execution.
In the second row, we'll keep the second row of data for execution.
In the third row, we'll keep the third row of data for execution.

The @Test method will be called as many times as the no.of rows in this 2 dimensional Object array which will return by
this method registrationData().

public class YahooRegistrationTest_Parameterization {
	
	@Test(dataProvider="registerationData")
	public void testRegister(String username, String password, String email, String city){
		// Selenium Code
		// username
		// password
		// email
		// city
		
		System.out.println(username +" -- "+password +" -- "+email +" -- "+city);
	}
	
	@DataProvider
	public Object[][] registerationData(){
		//rows - number of times test has to be repeated.
		//columns - parameters in data 
		Object[][] data = new Object[3][4];			// Object[rows][columns]
		
		//first row
		data[0][0] = "user1";
		data[0][1] = "pwd1";
		data[0][2] = "email1";
		data[0][3] = "city1";
		
		//second row
		data[1][0] = "user2";
		data[1][1] = "pwd2";
		data[1][2] = "email2";
		data[1][3] = "city2";
		
		//third row
		data[2][0] = "user3";
		data[2][1] = "pwd3";
		data[2][2] = "email3";
		data[2][3] = "city3";
		
		return data;
	}
}

This is the implementation of data provider. It is nothing but a method which return's a 2 dimensional array.

After this, in @Test method we have to write that dataprovider="registerationData". This registrationData is actually
responsible for sending the data to @Test method in this case it is testRegister().

Now we have to supply 4 input parameters in testRegister() method to accept the data coming from the dataprovider.
I have to supply input parameters equivalent to no. of columns in this 2 dimensional array i.e 
Object[3][4] [rows][columns]

public void testRegister(String username, String password, String email, String City)

So for the first row registrationData.
		data[0][0] = "user1";
		data[0][1] = "pwd1";
		data[0][2] = "email1";
		data[0][3] = "city1";
		
0th element i.e user1 will go inside the first parameter which is username.
1st element i.e pwd1 will go inside the second parameter which is password.
3rd element i.e email1 will go inside the third parameter which is email.
4th element i.e city1 will go inside the fourth parameter which is city.

Now let's write a SOP
System.out.println(username +" -- "+password +" -- "+email +" -- "+city);

That's it if you run the program you will see the no.of rows passed into testRegister method

