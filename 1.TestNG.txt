What is TestNG?

General Architecture of TestNG:
------------------------------
1. On the right hand side i am having the selenium scripts. I have got 'n' no.of scripts each representing a different testcase
to execute.
2. On the left hand side i am having some xls files from which i will read the data and all for executing the tests.
3. I have got the responsibility of generating the reports i.e, what happened in each of the testcase whether it got passed or 
failed.
4. I have to generate logs like what happened and what point of time. Suppose if your scripts runs for 6 to 7 hours were as to 
track the execution time we have to keep the log.

To control everything, so that scripts get the data from xls files then reports can be generated and the logs can be generated and 
everything happens in collaboration either with TestNG or Junit.

So the scripts out here on the right hand side and all the left hand side we have configurations and in the center we have the 
controller. The controller can be either TestNG or Junit.


TestNG Annotations:
Some of TestNG Annotations:
--------------------------
Ex: YahooMailTest.java file

1st @BeforeTest: executes before any of the Testcases. Ex: public void connectDatabase(){syso("connect to DB")}
2nd @BeforeMethod: Ex: public void openBrowser(){}
3rd @Test : will execute a particular Testcase which are nothing but methods representing Testcase.
4th @AfterMethod: Ex: public void closeBrowser(){} This will be called only after executing all the testcases
in that class.

@BeforeSuite: before executing all tests in all java files.
@AfterSuite: 

@BeforeTest: before executing all the @Tests(testcases).
@AfterTest: after executing all the @Tests(testcases).
@BeforeMethod: before executing every @Test.
@AfterMethod: after executing every @Test.


* A very good advantage of TestNG is after executing the testcases if you refresh the "project Explorer" 
a "test-output" folder will get generated. If you expand the folder you will have "index.html" file.
You have to go to the physical location of the index.html file and these are your html test reports.
So, automatically html test reports are also generated by TestNG. This is not there in JUNIT.

In JUNIT when you run it with ANT then only you will get the reports generated.

* Everytime the TestNG reports inside "test-output" folder will get updated meaning previous execution reports
will be lost only it will be having current execution reports. It will not store previous reports. 

There is a predefined order in execution of scripts with TestNG annotations.
The 1st executes is the @BeforeTest before executing any of the testcases that you define in a single file.
And after that @BeforeMethod annotation will get executed before executing each and every testcase.

